name: Deploy

on:
  pull_request:
    branches:
      - main
    types:
      - "closed"
  push:
    branches:
      - "feat/github-workflows" # TO DELETE

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: "us-east-1"
  ALB_LISTENER_RULE_ARN: "arn:aws:elasticloadbalancing:us-east-1:020856120665:listener-rule/app/dev-devops-course/a66599c576daed43/37db800791a435df/c5b7ff453c0dcc72"

jobs:
  # build:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout repo
  #       uses: actions/checkout@v3

  #     - name: Login to Docker registry
  #       uses: aws-actions/amazon-ecr-login@v1

  #     - name: Build and push
  #       uses: docker/build-push-action@v4
  #       with:
  #         context: .
  #         push: true
  #         tags: 020856120665.dkr.ecr.us-east-1.amazonaws.com/dev-devops-course-ecr:${{ github.run_number }}.${{ github.run_attempt }}

  deploy:
    # needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Get
        id: get
        run: |
          # Get target group arn with weight=0 (i.e. inactive one)
          INACTIVE_TARGET_GROUP=$(aws elbv2 describe-rules --rule-arns ${{ env.ALB_LISTENER_RULE_ARN }} --query="Rules[*].Actions[*].ForwardConfig.TargetGroups[?Weight==\`0\`].TargetGroupArn" --output text)

          if [[ ${INACTIVE_TARGET_GROUP} == *"dev-devops-course-app-blue"* ]];
          then
            INACTIVE_SERVICE="dev-devops-course-app-blue"
          elif [[ ${INACTIVE_TARGET_GROUP} == *"dev-devops-course-app-green"* ]];
          then
            INACTIVE_TARGET_GROUP="dev-devops-course-app-green"
          else
            echo "Failed to find inactive service."
            exit 1
          fi

          echo $INACTIVE_TARGET_GROUP
          echo "inactive_service=${INACTIVE_SERVICE}" >> GITHUB_OUTPUT
          echo "test=${INACTIVE_TARGET_GROUP}" >> GITHUB_OUTPUT
      - name: Test
        run: echo ${{ steps.get.outputs.test }}
    # steps:
    #   - name: Get task definition
    #     run: aws ecs describe-task-definition --task-definition arn:aws:ecs:us-east-1:020856120665:task-definition/dev-devops-course --query="taskDefinition" > task-definition.json

    #   - name: Render task definition
    #     id: task-def
    #     uses: aws-actions/amazon-ecs-render-task-definition@v1
    #     with:
    #       task-definition: task-definition.json
    #       container-name: app
    #       image: 020856120665.dkr.ecr.us-east-1.amazonaws.com/dev-devops-course-ecr:${{ github.run_number }}.${{ github.run_attempt }}

    #   - name: Get inactive ECS service
    #     id: get_ecs_service
    #     run: |
    #       # Get target group arn with weight=0 (i.e. inactive one)
    #       INACTIVE_TARGET_GROUP=$(aws elbv2 describe-rules --rule-arns ${{ env.ALB_LISTENER_RULE_ARN }} --query="Rules[*].Actions[*].ForwardConfig.TargetGroups[?Weight==\`0\`].TargetGroupArn" --output text)

    #       if [[ ${INACTIVE_TARGET_GROUP} == *"dev-devops-course-app-blue"* ]];
    #       then
    #         INACTIVE_SERVICE="dev-devops-course-app-blue"
    #       elif [[ ${INACTIVE_TARGET_GROUP} == *"dev-devops-course-app-green"* ]];
    #       then
    #         INACTIVE_TARGET_GROUP="dev-devops-course-app-green"
    #       else
    #         echo "Failed to find inactive service."
    #         exit 1
    #       fi

    #       echo $INACTIVE_SERVICE
    #       echo "inactive_service=$INACTIVE_SERVICE" >> GITHUB_OUTPUT
    #       echo "inactive_target_group=$INACTIVE_TARGET_GROUP" >> GITHUB_OUTPUT

    #   - name: Deploy Amazon ECS task definition
    #     uses: aws-actions/amazon-ecs-deploy-task-definition@v1
    #     with:
    #       task-definition: ${{ steps.task-def.outputs.task-definition }}
    #       service: ${{ steps.get_ecs_service.outputs.inactive_service }}
    #       cluster: dev-devops-course
    #       wait-for-service-stability: true

    #   - name: Switch traffic
    #     run: |
    #       echo ${{ steps.get_ecs_service.outputs.inactive_service }}

    #       active_target_group=$(aws elbv2 describe-rules --rule-arns ${{ env.ALB_LISTENER_RULE_ARN }} --query="Rules[*].Actions[*].ForwardConfig.TargetGroups[?Weight==\`100\`].TargetGroupArn" --output text)

    #       # Quick check to see if target groups have not mixed up
    #       if [[ ${active_target_group} == ${{ steps.get_ecs_service.outputs.inactive_target_group }} ]];
    #       then
    #         echo "Active target group is the same as the inactive one."
    #         exit 1
    #       fi

    #       aws elbv2 modify-rule --rule-arn ${{ env.ALB_LISTENER_RULE_ARN }} --actions \
    #         '[{
    #             "Type": "forward",
    #             "Order": 1,
    #             "ForwardConfig": {
    #               "TargetGroups": [
    #                   {"TargetGroupArn": "${{ steps.get_ecs_service.outputs.inactive_target_group }}", "Weight": 100 },
    #                   {"TargetGroupArn": "${active_target_group}", "Weight": 0 }
    #               ]
    #             }
    #         }]'
