name: Terraform Plan

on:
  pull_request:
    branches:
      - main
    types:
      - opened
      - synchronize
      - reopened
    paths:
      - 'terraform/**.tf'

env:
  TF_IN_AUTOMATION: "yes"
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

jobs:
  main:
    runs-on: ubuntu-latest
    environment: demo
    defaults:
      run:
        working-directory: terraform/002
    steps:
    - name: Checkout repo
      uses: actions/checkout@v3

    - name: Setup terraform
      uses: hashicorp/setup-terraform@v2

    - name: Terraform fmt
      id: fmt
      run: terraform fmt -recursive -check
      continue-on-error: true

    - name: Terraform Init
      id: init
      run: terraform init

    - name: Terraform validate
      id: validate
      run: terraform validate -no-color

    - name: Terraform Plan
      id: plan
      run: terraform plan -no-color -var ssh_public_key="${{ secrets.SSH_PUBLIC_KEY }}"

    # - name: Terraform Plan
    #   id: plan
    #   run: terraform plan -no-color -var ssh_public_key="${{ secrets.SSH_PUBLIC_KEY }}" -compact-warnings -out=${RUNNER_TEMP}/_plan.tf  > "${RUNNER_TEMP}/tf_plan.output"

    # - continue-on-error: true
    #   id: tfplan_beautify
    #   run: grep -v "Refreshing state\.\.\." "${RUNNER_TEMP}/tf_plan.output" | tail -c 65000 > "${RUNNER_TEMP}/tf_plan.txt"

    # - uses: actions/github-script@v6
    #   with:
    #     github-token: ${{ secrets.PAT }}
    #     script: "const fs = require('fs');\nconst tfplan = fs.readFileSync(process.env.RUNNER_TEMP + \"/tf_plan.txt\", \"utf8\");\n\nconst output = `#### Terraform Initialization ‚öôÔ∏è\\`${{ steps.init.outcome }}\\`\n\n#### Terraform Plan \U0001F4D6\\`${{ steps.plan.outcome }}\\`\n<details><summary>Show Plan</summary>\n\n\\`\\`\\`\\n\n${tfplan.replace(/%0A/g,\"\\n\")}\n\\`\\`\\`\n\n</details>\n\n*Pusher: @${{ github.actor }}, Action: \\`${{ github.event_name }}\\`, Working Directory: \\`${{ env.TFPATH }}\\`, Workflow: \\`${{ github.workflow }}\\`*`;\n\ngithub.rest.issues.createComment({\n  issue_number: context.issue.number,\n  owner: context.repo.owner,\n  repo: context.repo.repo,\n  body: output\n});\n\nif (\"${{ steps.init.conclusion }}\" != \"success\") {\n  core.setFailed(\"Terraform init failed\")\n}\n\nif (\"${{ steps.plan.conclusion }}\" != \"success\") {\n  core.setFailed(\"Terraform plan failed\")\n}\n"

    - uses: actions/github-script@v6
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.PAT }}
        script: |
          const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
          <details><summary>Validation Output</summary>

          \`\`\`\n
          ${{ steps.validate.outputs.stdout }}
          \`\`\`

          </details>

          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

          <details><summary>Show Plan</summary>

          \`\`\`\n
          ${process.env.PLAN}
          \`\`\`

          </details>

          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })


